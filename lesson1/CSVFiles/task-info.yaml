type: edu
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 972
    length: 138
    placeholder_text: |-
      /* TODO.
      Change what needs to go here to start reading "filename" */
    initial_state:
      length: 68
      offset: 282
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: new BufferedInputStream(new FileInputStream(filename))
  - offset: 1119
    length: 0
    placeholder_text: "/* TODO \nCreate a byte array of about 1024 bytes or however\
      \ many bytes you want. */"
    initial_state:
      length: 83
      offset: 381
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: new byte[1024]
  - offset: 1119
    length: 0
    placeholder_text: "/* TODO \nCreate a while loop to read the contents of the file\
      \ and put them in the variable \"contents\" declared at the beginning of the\
      \ method. */"
    initial_state:
      length: 145
      offset: 506
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: |-
      while ((lengthRead = in.read(buffer)) > 0) {
                      contents = contents + new String(buffer,0,lengthRead);
                  }
  - offset: 1119
    length: 46
    placeholder_text: "/* TODO \nPut the correct Exception here. */"
    initial_state:
      length: 43
      offset: 669
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: IOException e
  - offset: 1181
    length: 69
    placeholder_text: "/* TODO \nReturn a Databse object initialized with the contents\
      \ read. */"
    initial_state:
      length: 71
      offset: 802
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: new Database(contents)
  text: "import java.io.*;\n\npublic class Task {\n    public static void main(String[]\
    \ ar) {\n        Task t = new Task();\n        Database d = t.readCSV(\"./resources/iris.data\"\
    );\n    }\n\n    public Database readCSV(String filename) {\n        String contents\
    \ = \"\";\n        try (InputStream in = /* TODO.\nChange what needs to go here\
    \ to start reading \"filename\" */){\n            byte[] buffer = /* TODO \nCreate\
    \ a byte array of about 1024 bytes or however many bytes you want. */;\n     \
    \       int lengthRead;\n            /* TODO \nCreate a while loop to read the\
    \ contents of the file and put them in the variable \"contents\" declared at the\
    \ beginning of the method. */\n        } catch (/* TODO \nPut the correct Exception\
    \ here. */) {\n            e.printStackTrace();\n            System.exit(-1);\n\
    \        }\n       return /* TODO \nReturn a Databse object initialized with the\
    \ contents read. */;\n    }\n}\n"
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.junit.Assert;
    import org.junit.Test;

    public class Tests {
      @Test
      public void testSolution() {
        Task t = new Task();
        Database d = t.readCSV("test/iris.data");
        Assert.assertEquals("Number of rows not correct",151,d.getNumRows()+1);
        Assert.assertEquals("Column headers not matching","species",d.getColNames()[d.getColNames().length-1]);
        Assert.assertEquals("Data may not be read correctly","4.9",d.getData()[1][0]);
        Assert.assertEquals("getValue is not working correctly.","2.8",d.getValue("s-width",121));
      }
    }
  learner_created: false
- name: src/Database.java
  visible: true
  placeholders:
  - offset: 823
    length: 873
    placeholder_text: "/* TODO \nThis constructor should take the contents of a CSV\
      \ file and initialize the memember variables of the Database class.\n*/"
    initial_state:
      length: 128
      offset: 613
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: |2-
              String[] lines = contents.split("\n");
              this.colNames = lines[0].split(",");
              this.data = new String[lines.length - 1][this.colNames.length];
              for (int i = 1; i < lines.length; i++) {
                  this.data[i - 1] = lines[i].split(",");
              }
              this.numRows = lines.length - 1;
  - offset: 1752
    length: 508
    placeholder_text: |-
      /* TODO */
      This method should return the data contained on row "row" and the column matching  @columname
    initial_state:
      length: 104
      offset: 804
    initialized_from_dependency: false
    selected: true
    status: Solved
    encrypted_possible_answer: |2-
              int col = 0;
              for(col=0;col<this.colNames.length && !(this.colNames[col].equals(columnName));col++);
              return this.data[row][col];
  text: "import java.util.Arrays;\n\npublic class Database {\n    private String[]\
    \ colNames;\n    private int numRows;\n    private String[][] data;\n\n    public\
    \ String[] getColNames() {\n        return colNames;\n    }\n\n    public void\
    \ setColNames(String[] colNames) {\n        this.colNames = colNames;\n    }\n\
    \n    public int getNumRows() {\n        return numRows;\n    }\n\n    public\
    \ void setNumRows(int numRows) {\n        this.numRows = numRows;\n    }\n\n \
    \   public String[][] getData() {\n        return data;\n    }\n\n    public void\
    \ setData(String[][] data) {\n        this.data = data;\n    }\n\n    public Database(String\
    \ contents) {\n/* TODO \nThis constructor should take the contents of a CSV file\
    \ and initialize the memember variables of the Database class.\n*/\n    }\n\n\
    \    public String getValue(String columnName,int row){\n/* TODO */\nThis method\
    \ should return the data contained on row \"row\" and the column matching  @columname\n\
    \    }\n\n}\n\n\n"
  learner_created: false
- name: test/iris.data
  visible: true
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 19 Feb 2021 03:24:22 UTC
record: -1
